{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "74 Project",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PRANAVTURLAPATI/Data-Visualization-Projects-with-Python-Libraries/blob/main/Normalization%2C%20Sigmoids%2C%20and%20Thresholds\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OkWqRyLTyE1Z"
      },
      "source": [
        "#### Activity 1:  Analysing the Dataset\n",
        "\n",
        "\n",
        "\n",
        "- Create a Pandas DataFrame for a **Social Network** dataset using the below link. This dataset consists of the following columns:\n",
        "\n",
        "|Field|Description|\n",
        "|---:|:---|\n",
        "|UserID|Unique ID|\n",
        "|Gender|Male or Female|\n",
        "|Age|Age of a person|\n",
        "|EstimatedSalary|Salary of a person|\n",
        "|Purchased|‘0’ or ‘1’. ‘0’ means not purchased and ‘1’ means purchased.|\n",
        "\n",
        "\n",
        " **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv\n",
        "\n",
        "\n",
        "- Print first five rows of the dataset. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d8LegW1YyS3V"
      },
      "source": [
        "# Import the required modules and load the dataset\n",
        "import pandas as pd\n",
        "df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XMuURFw6yZmC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f04eeae8-6f66-4c49-ae15-ce09068e3e68"
      },
      "source": [
        "# Print first five rows of the dataframe.\n",
        "print(df.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    User ID  Gender  Age  EstimatedSalary  Purchased\n",
            "0  15624510    Male   19            19000          0\n",
            "1  15810944    Male   35            20000          0\n",
            "2  15668575  Female   26            43000          0\n",
            "3  15603246  Female   27            57000          0\n",
            "4  15804002    Male   19            76000          0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qBZ8bgu8nInW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9a4a4b6-d84c-4d29-b0b8-66cffd08e642"
      },
      "source": [
        "# Check for null values\n",
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User ID            0\n",
              "Gender             0\n",
              "Age                0\n",
              "EstimatedSalary    0\n",
              "Purchased          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T-bX2wLonKzU"
      },
      "source": [
        "**Q:** Are there any missing values?\n",
        "\n",
        "**A:** no"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dbFRn6XBnGS8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "c9bc3b4f-f9bc-4d39-c3b1-17f5f2b4dd0b"
      },
      "source": [
        "# Create a heatmap to identify the relation between attributes\n",
        "import seaborn as sns\n",
        "df['Gender']=df['Gender'].apply(lambda x: 0 if x==\"Male\" else 1)\n",
        "df_corr = df.iloc[:, 1:].corr()\n",
        "sns.heatmap(df_corr, annot = True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7455845910>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B6Faw5WYnf-O"
      },
      "source": [
        "**Q:** Which attribute(s) has the strongest relationship with the `Purchased` feature? Why?\n",
        "\n",
        "**A:** Age"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7RGCWGLRm0wF"
      },
      "source": [
        "#### Activity 2:  Normalise the Dataset\n",
        "\n",
        " Perform the following tasks:\n",
        "\n",
        " - Get the descriptive statistics for the `Age` column.\n",
        "\n",
        " - Normalise the `Are` column values by calculating their $Z$-scores (or standard scaler). \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZwNbJzG7noyc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "outputId": "761b2508-307a-4938-b299-aff2e3d0674e"
      },
      "source": [
        "# Get the descriptive statistics for the 'Age' column. \n",
        "df['Age'].describe()\n",
        "# Plot a histogram to show the distribution of values for the 'Age' column. \n",
        "import matplotlib.pyplot as plt\n",
        "plt.hist(df['Age'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([28., 37., 46., 35., 77., 65., 35., 31., 18., 28.]),\n",
              " array([18. , 22.2, 26.4, 30.6, 34.8, 39. , 43.2, 47.4, 51.6, 55.8, 60. ]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i8jUq398nyK_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "outputId": "0f3d5cfc-1c97-4421-ca2b-d8bd4ec33e9c"
      },
      "source": [
        "# Normalise the 'Age' column values using the standard scaler method.\n",
        "def z_score(series):\n",
        "  return (series - series.mean()) / (series.std())\n",
        "# Get the descriptive statistics for the normalised 'Age' column. \n",
        "df['Age'].describe()\n",
        "# Plot a histogram to show the distribution of values for the normalised 'age' column.\n",
        "plt.hist(z_score(df['Age']), bins = 'sturges')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([28., 37., 46., 35., 77., 65., 35., 31., 18., 28.]),\n",
              " array([-1.87496245, -1.47430907, -1.07365568, -0.67300229, -0.27234891,\n",
              "         0.12830448,  0.52895786,  0.92961125,  1.33026463,  1.73091802,\n",
              "         2.13157141]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ne6b_j10JOO"
      },
      "source": [
        "#### Activity 3:  Calculate the Sigmoid Output\n",
        "\n",
        "1. Create a sigmoid function. \n",
        "\n",
        "2.  Calculate the sigmoid output for the scaled (or Normalised) `Age` values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "byMs7DJKoYnt"
      },
      "source": [
        "# Create a sigmoid() function using the above formula.\n",
        "import numpy as np\n",
        "def sigmoid(x):\n",
        "  return 1/(1 + (np.exp(-x)))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "moY-xMeLoacu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "853ac1d9-e6a5-473a-d882-b30d3006224d"
      },
      "source": [
        "# Calculate the sigmoid output for the scaled (or normalised) Age values.\n",
        "sigmoid_output = sigmoid(z_score(df['Age']))\n",
        "# Get the descriptive statistics for the sigmoid output of the normalised 'Age'. \n",
        "sigmoid_output.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    400.000000\n",
              "mean       0.497031\n",
              "std        0.212792\n",
              "min        0.132969\n",
              "25%        0.319999\n",
              "50%        0.484384\n",
              "75%        0.689131\n",
              "max        0.893934\n",
              "Name: Age, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HeKSJ2kDK1sD"
      },
      "source": [
        "#### Activity 4:  Model Prediction\n",
        "\n",
        "Consider the threshold probability value of 0.5. \n",
        "\n",
        "- Create a function that classifies the sigmoid output for the scaled  `Age` values into 0s and 1s using a threshold value of 0.5.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-YHBFvoZ-1Ju"
      },
      "source": [
        "# Create a function 'predict()' that takes the sigmoid output and the threshold\n",
        "# and returns a Pandas series containing the predicted values (0s and 1s) as the output.\n",
        "def predict(sigmoid_out, threshold):\n",
        "  y_pred = [1 if i >= threshold else 0 for i in sigmoid_output]\n",
        "  return y_pred"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WvpYszOrpBBV"
      },
      "source": [
        "# Use the 'predict()' function to classify the 'sigmoid()' function outputs as 0 and 1.\n",
        "# Consider a threshold value of 0.5.\n",
        "sigmoid_predicted = predict(sigmoid_output, 0.5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wf7G6AMyND1s"
      },
      "source": [
        "#### Activity 5:  Model Evaluation\n",
        "\n",
        "Evaluate the model by calculating the number of false positives and false negatives using a confusion matrix. Also, print the classification report for the predicted values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MujpW8MlD5JO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a8108f40-e5ca-4dc1-bdf7-89827dc9cd60"
      },
      "source": [
        "# Create a confusion matrix for the predicted values.\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "print(confusion_matrix(df['Purchased'], sigmoid_predicted))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[181  76]\n",
            " [ 29 114]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JxQLwQOSD9fr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70359f67-dea2-4015-ad8a-50482640b8fd"
      },
      "source": [
        "# Print the classification report for the predicted values.\n",
        "print(classification_report(df['Purchased'], sigmoid_predicted))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.70      0.78       257\n",
            "           1       0.60      0.80      0.68       143\n",
            "\n",
            "    accuracy                           0.74       400\n",
            "   macro avg       0.73      0.75      0.73       400\n",
            "weighted avg       0.77      0.74      0.74       400\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FbNcwVwsqDj-"
      },
      "source": [
        "**Q** Write the count of f1-score for both the labels?\n",
        "\n",
        "**A:** .78 and .68"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h07JSNS3dt7b"
      },
      "source": [
        "#### Activity 6: Experiment and Compare Performance With Some Threshold Values\n",
        "\n",
        "Try threshold values =$[0.1,0.3,0.5,0.7,0.9]$ and compare their performance. Plot a graph to visualise. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yD8187eqdtRl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "outputId": "37284b47-f66a-4f06-aece-7bc2e82c2233"
      },
      "source": [
        "# function to calculate accuracy\n",
        "from sklearn.metrics import accuracy_score\n",
        "threshold_values = [0.1, 0.3, 0.5, 0.7, 0.9]\n",
        "accuracy_list = []\n",
        "def calculate_accuracy():\n",
        "  # Calculate accuracy and save it in the accuracy list\n",
        "  for i in threshold_values:\n",
        "    acc = accuracy_score(predict(sigmoid_output, i), df['Purchased'])\n",
        "    accuracy_list.append(acc)\n",
        "calculate_accuracy()\n",
        "# print the accuracy values\n",
        "for j in range(len(threshold_values)):\n",
        "  print(f\"Accuracy over threshold {threshold_values[j]} = {accuracy_list[j]}\")\n",
        "#  Plot graph to visualise the accuracy for various thresholds  \n",
        "plt.plot(threshold_values, accuracy_list)\n",
        "plt.xlabel('Threshold Values')\n",
        "plt.ylabel('Accuracy')\n",
        "# function to show the plot \n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy over threshold 0.1 = 0.3575\n",
            "Accuracy over threshold 0.3 = 0.5675\n",
            "Accuracy over threshold 0.5 = 0.7375\n",
            "Accuracy over threshold 0.7 = 0.82\n",
            "Accuracy over threshold 0.9 = 0.6425\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i2pV9URsd3HF"
      },
      "source": [
        "**Q:** What are your observations for change in accuracy with respect to threshold values? Why do you think this is the case?\n",
        "\n",
        "**A:** accuracy increases until approx 0.7 and then falls\n",
        "\n",
        "**Reason**: at .7 threshold, prob of purchase being made is highest"
      ]
    }
  ]
}